// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

// ignore_for_file: non_constant_identifier_names

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:UserParam.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// UserParam TABLE
class TableUserParam extends SqfEntityTableBase {
  TableUserParam() {
    // declare properties of EntityTable
    tableName = 'userParams';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('status', DbType.integer,
          defaultValue: 1, isNotNull: true),
      SqfEntityFieldBase('date_modify', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('logged', DbType.bool,
          defaultValue: false, isNotNull: true),
      SqfEntityFieldBase('name', DbType.text, isNotNull: true),
      SqfEntityFieldBase('mail', DbType.text),
      SqfEntityFieldBase('auth_code', DbType.text),
      SqfEntityFieldBase('avatar', DbType.blob, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableUserParam();
  }
}

// Category TABLE
class TableCategory extends SqfEntityTableBase {
  TableCategory() {
    // declare properties of EntityTable
    tableName = 'category';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('status', DbType.integer,
          defaultValue: 1, isNotNull: true),
      SqfEntityFieldBase('date_modify', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('user_id', DbType.integer),
      SqfEntityFieldBase('text', DbType.text, isNotNull: true),
      SqfEntityFieldBase('icon_code', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('icon_color', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('block', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('position', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('type', DbType.integer, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableCategory();
  }
}

// Operation TABLE
class TableOperation extends SqfEntityTableBase {
  TableOperation() {
    // declare properties of EntityTable
    tableName = 'operation';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('status', DbType.integer,
          defaultValue: 1, isNotNull: true),
      SqfEntityFieldBase('date_modify', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('type', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('user_id', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('category_id', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('date', DbType.integer, isNotNull: true),
      SqfEntityFieldBase('description', DbType.text),
      SqfEntityFieldBase('value', DbType.real, isNotNull: true),
    ];
    super.init();
  }
  static SqfEntityTableBase? _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableOperation();
  }
}
// END TABLES

// BEGIN DATABASE MODEL
class FamilyBudgetModel extends SqfEntityModelProvider {
  FamilyBudgetModel() {
    databaseName = familyBudgetModel.databaseName;
    password = familyBudgetModel.password;
    dbVersion = familyBudgetModel.dbVersion;
    preSaveAction = familyBudgetModel.preSaveAction;
    logFunction = familyBudgetModel.logFunction;
    databaseTables = [
      TableUserParam.getInstance,
      TableCategory.getInstance,
      TableOperation.getInstance,
    ];

    bundledDatabasePath = familyBudgetModel
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = <String, dynamic>{};

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region UserParam
class UserParam extends TableBase {
  UserParam(
      {this.id,
      this.status,
      this.date_modify,
      this.logged,
      this.name,
      this.mail,
      this.auth_code,
      this.avatar}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  UserParam.withFields(this.status, this.date_modify, this.logged, this.name,
      this.mail, this.auth_code, this.avatar) {
    _setDefaultValues();
  }
  UserParam.withId(this.id, this.status, this.date_modify, this.logged,
      this.name, this.mail, this.auth_code, this.avatar) {
    _setDefaultValues();
  }
  // fromMap v2.0
  UserParam.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['status'] != null) {
      status = int.tryParse(o['status'].toString());
    }
    if (o['date_modify'] != null) {
      date_modify = int.tryParse(o['date_modify'].toString());
    }
    if (o['logged'] != null) {
      logged =
          o['logged'].toString() == '1' || o['logged'].toString() == 'true';
    }
    if (o['name'] != null) {
      name = o['name'].toString();
    }
    if (o['mail'] != null) {
      mail = o['mail'].toString();
    }
    if (o['auth_code'] != null) {
      auth_code = o['auth_code'].toString();
    }
    if (o['avatar'] != null) {
      avatar = o['avatar'] as Uint8List;
    }
  }
  // FIELDS (UserParam)
  int? id;
  int? status;
  int? date_modify;
  bool? logged;
  String? name;
  String? mail;
  String? auth_code;
  Uint8List? avatar;

  // end FIELDS (UserParam)

  static const bool _softDeleteActivated = false;
  UserParamManager? __mnUserParam;

  UserParamManager get _mnUserParam {
    return __mnUserParam = __mnUserParam ?? UserParamManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (logged != null) {
      map['logged'] = forQuery ? (logged! ? 1 : 0) : logged;
    } else if (logged != null || !forView) {
      map['logged'] = null;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (mail != null || !forView) {
      map['mail'] = mail;
    }
    if (auth_code != null || !forView) {
      map['auth_code'] = auth_code;
    }
    if (avatar != null || !forView) {
      map['avatar'] = avatar;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (logged != null) {
      map['logged'] = forQuery ? (logged! ? 1 : 0) : logged;
    } else if (logged != null || !forView) {
      map['logged'] = null;
    }
    if (name != null || !forView) {
      map['name'] = name;
    }
    if (mail != null || !forView) {
      map['mail'] = mail;
    }
    if (auth_code != null || !forView) {
      map['auth_code'] = auth_code;
    }
    if (avatar != null || !forView) {
      map['avatar'] = avatar;
    }

    return map;
  }

  /// This method returns Json String [UserParam]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [UserParam]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [status, date_modify, logged, name, mail, auth_code, avatar];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [id, status, date_modify, logged, name, mail, auth_code, avatar];
  }

  static Future<List<UserParam>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR UserParam.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<UserParam>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <UserParam>[];
    try {
      objList = list
          .map((userparam) =>
              UserParam.fromMap(userparam as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR UserParam.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<UserParam>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<UserParam> objList = <UserParam>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = UserParam.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns UserParam by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [UserParam] if exist, otherwise returns null
  Future<UserParam?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    UserParam? obj;
    final data = await _mnUserParam.getById([id]);
    if (data.length != 0) {
      obj = UserParam.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (UserParam) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUserParam.insert(this, ignoreBatch);
    } else {
      await _mnUserParam.update(this);
    }

    return id;
  }

  /// Saves the (UserParam) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnUserParam.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnUserParam.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs UserParam. Returns a new Primary Key value of UserParam

  /// <returns>Returns a new Primary Key value of UserParam
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<UserParam> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<UserParam> userparams) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await FamilyBudgetModel().batchStart();
    for (final obj in userparams) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await FamilyBudgetModel().batchCommit();
      for (int i = 0; i < userparams.length; i++) {
        if (userparams[i].id == null) {
          userparams[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnUserParam.rawInsert(
          'INSERT OR REPLACE INTO userParams (id, status, date_modify, logged, name, mail, auth_code, avatar)  VALUES (?,?,?,?,?,?,?,?)',
          [id, status, date_modify, logged, name, mail, auth_code, avatar],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'UserParam id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'UserParam id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'UserParam Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<UserParam>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<UserParam> userparams) async {
    final results = await _mnUserParam.rawInsertAll(
        'INSERT OR REPLACE INTO userParams (id, status, date_modify, logged, name, mail, auth_code, avatar)  VALUES (?,?,?,?,?,?,?,?)',
        userparams);
    return results;
  }

  /// Deletes UserParam

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete UserParam invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnUserParam
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnUserParam.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [UserParam] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  UserParamFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserParamFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  UserParamFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return UserParamFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    status = status ?? 1;
    logged = logged ?? false;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion userparam

// region UserParamField
class UserParamField extends FilterBase {
  UserParamField(UserParamFilterBuilder userparamFB) : super(userparamFB);

  @override
  UserParamFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder isNull() {
    return super.isNull() as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as UserParamFilterBuilder;
  }

  @override
  UserParamField get not {
    return super.not as UserParamField;
  }
}
// endregion UserParamField

// region UserParamFilterBuilder
class UserParamFilterBuilder extends ConjunctionBase {
  UserParamFilterBuilder(UserParam obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnUserParam = obj._mnUserParam;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  UserParamManager? _mnUserParam;

  /// put the sql keyword 'AND'
  @override
  UserParamFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  UserParamFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  UserParamFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  UserParamFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  UserParamFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  UserParamFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  UserParamFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserParamFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserParamFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  UserParamFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  UserParamFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  UserParamField _setField(
      UserParamField? field, String colName, DbType dbtype) {
    return UserParamField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  UserParamField? _id;
  UserParamField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  UserParamField? _status;
  UserParamField get status {
    return _status = _setField(_status, 'status', DbType.integer);
  }

  UserParamField? _date_modify;
  UserParamField get date_modify {
    return _date_modify =
        _setField(_date_modify, 'date_modify', DbType.integer);
  }

  UserParamField? _logged;
  UserParamField get logged {
    return _logged = _setField(_logged, 'logged', DbType.bool);
  }

  UserParamField? _name;
  UserParamField get name {
    return _name = _setField(_name, 'name', DbType.text);
  }

  UserParamField? _mail;
  UserParamField get mail {
    return _mail = _setField(_mail, 'mail', DbType.text);
  }

  UserParamField? _auth_code;
  UserParamField get auth_code {
    return _auth_code = _setField(_auth_code, 'auth_code', DbType.text);
  }

  UserParamField? _avatar;
  UserParamField get avatar {
    return _avatar = _setField(_avatar, 'avatar', DbType.blob);
  }

  /// Deletes List<UserParam> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnUserParam!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnUserParam!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from userParams ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnUserParam!.updateBatch(qparams, values);
  }

  /// This method always returns [UserParam] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> UserParam?
  @override
  Future<UserParam?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnUserParam!.toList(qparams);
    final data = await objFuture;
    UserParam? obj;
    if (data.isNotEmpty) {
      obj = UserParam.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [UserParam]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> UserParam?
  @override
  Future<UserParam> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        UserParam();
  }

  /// This method returns int. [UserParam]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? userparamCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final userparamsFuture = await _mnUserParam!.toList(qparams);
    final int count = userparamsFuture[0]['CNT'] as int;
    if (userparamCount != null) {
      userparamCount(count);
    }
    return count;
  }

  /// This method returns List<UserParam> [UserParam]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<UserParam>
  @override
  Future<List<UserParam>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<UserParam> userparamsData = await UserParam.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return userparamsData;
  }

  /// This method returns Json String [UserParam]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [UserParam]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [UserParam]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnUserParam!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [UserParam]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM userParams WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnUserParam!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [UserParam]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnUserParam!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await UserParam.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnUserParam!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion UserParamFilterBuilder

// region UserParamFields
class UserParamFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.integer);
  }

  static TableField? _fDate_modify;
  static TableField get date_modify {
    return _fDate_modify = _fDate_modify ??
        SqlSyntax.setField(_fDate_modify, 'date_modify', DbType.integer);
  }

  static TableField? _fLogged;
  static TableField get logged {
    return _fLogged =
        _fLogged ?? SqlSyntax.setField(_fLogged, 'logged', DbType.bool);
  }

  static TableField? _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField? _fMail;
  static TableField get mail {
    return _fMail = _fMail ?? SqlSyntax.setField(_fMail, 'mail', DbType.text);
  }

  static TableField? _fAuth_code;
  static TableField get auth_code {
    return _fAuth_code = _fAuth_code ??
        SqlSyntax.setField(_fAuth_code, 'auth_code', DbType.text);
  }

  static TableField? _fAvatar;
  static TableField get avatar {
    return _fAvatar =
        _fAvatar ?? SqlSyntax.setField(_fAvatar, 'avatar', DbType.blob);
  }
}
// endregion UserParamFields

//region UserParamManager
class UserParamManager extends SqfEntityProvider {
  UserParamManager()
      : super(FamilyBudgetModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'userParams';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion UserParamManager
// region Category
class Category extends TableBase {
  Category(
      {this.id,
      this.status,
      this.date_modify,
      this.user_id,
      this.text,
      this.icon_code,
      this.icon_color,
      this.block,
      this.position,
      this.type}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Category.withFields(this.status, this.date_modify, this.user_id, this.text,
      this.icon_code, this.icon_color, this.block, this.position, this.type) {
    _setDefaultValues();
  }
  Category.withId(
      this.id,
      this.status,
      this.date_modify,
      this.user_id,
      this.text,
      this.icon_code,
      this.icon_color,
      this.block,
      this.position,
      this.type) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Category.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['status'] != null) {
      status = int.tryParse(o['status'].toString());
    }
    if (o['date_modify'] != null) {
      date_modify = int.tryParse(o['date_modify'].toString());
    }
    if (o['user_id'] != null) {
      user_id = int.tryParse(o['user_id'].toString());
    }
    if (o['text'] != null) {
      text = o['text'].toString();
    }
    if (o['icon_code'] != null) {
      icon_code = int.tryParse(o['icon_code'].toString());
    }
    if (o['icon_color'] != null) {
      icon_color = int.tryParse(o['icon_color'].toString());
    }
    if (o['block'] != null) {
      block = int.tryParse(o['block'].toString());
    }
    if (o['position'] != null) {
      position = int.tryParse(o['position'].toString());
    }
    if (o['type'] != null) {
      type = int.tryParse(o['type'].toString());
    }
  }
  // FIELDS (Category)
  int? id;
  int? status;
  int? date_modify;
  int? user_id;
  String? text;
  int? icon_code;
  int? icon_color;
  int? block;
  int? position;
  int? type;

  // end FIELDS (Category)

  static const bool _softDeleteActivated = false;
  CategoryManager? __mnCategory;

  CategoryManager get _mnCategory {
    return __mnCategory = __mnCategory ?? CategoryManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (user_id != null || !forView) {
      map['user_id'] = user_id;
    }
    if (text != null || !forView) {
      map['text'] = text;
    }
    if (icon_code != null || !forView) {
      map['icon_code'] = icon_code;
    }
    if (icon_color != null || !forView) {
      map['icon_color'] = icon_color;
    }
    if (block != null || !forView) {
      map['block'] = block;
    }
    if (position != null || !forView) {
      map['position'] = position;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (user_id != null || !forView) {
      map['user_id'] = user_id;
    }
    if (text != null || !forView) {
      map['text'] = text;
    }
    if (icon_code != null || !forView) {
      map['icon_code'] = icon_code;
    }
    if (icon_color != null || !forView) {
      map['icon_color'] = icon_color;
    }
    if (block != null || !forView) {
      map['block'] = block;
    }
    if (position != null || !forView) {
      map['position'] = position;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }

    return map;
  }

  /// This method returns Json String [Category]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Category]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      status,
      date_modify,
      user_id,
      text,
      icon_code,
      icon_color,
      block,
      position,
      type
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      status,
      date_modify,
      user_id,
      text,
      icon_code,
      icon_color,
      block,
      position,
      type
    ];
  }

  static Future<List<Category>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Category.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Category>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Category>[];
    try {
      objList = list
          .map((category) => Category.fromMap(category as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Category.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Category>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Category> objList = <Category>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Category.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Category by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Category] if exist, otherwise returns null
  Future<Category?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Category? obj;
    final data = await _mnCategory.getById([id]);
    if (data.length != 0) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCategory.insert(this, ignoreBatch);
    } else {
      await _mnCategory.update(this);
    }

    return id;
  }

  /// Saves the (Category) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnCategory.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnCategory.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Category. Returns a new Primary Key value of Category

  /// <returns>Returns a new Primary Key value of Category
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Category> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Category> categories) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await FamilyBudgetModel().batchStart();
    for (final obj in categories) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await FamilyBudgetModel().batchCommit();
      for (int i = 0; i < categories.length; i++) {
        if (categories[i].id == null) {
          categories[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnCategory.rawInsert(
          'INSERT OR REPLACE INTO category (id, status, date_modify, user_id, text, icon_code, icon_color, block, position, type)  VALUES (?,?,?,?,?,?,?,?,?,?)',
          [
            id,
            status,
            date_modify,
            user_id,
            text,
            icon_code,
            icon_color,
            block,
            position,
            type
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Category id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Category id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Category Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Category>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Category> categories) async {
    final results = await _mnCategory.rawInsertAll(
        'INSERT OR REPLACE INTO category (id, status, date_modify, user_id, text, icon_code, icon_color, block, position, type)  VALUES (?,?,?,?,?,?,?,?,?,?)',
        categories);
    return results;
  }

  /// Deletes Category

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Category invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnCategory
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnCategory.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Category] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  CategoryFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  CategoryFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return CategoryFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    status = status ?? 1;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion category

// region CategoryField
class CategoryField extends FilterBase {
  CategoryField(CategoryFilterBuilder categoryFB) : super(categoryFB);

  @override
  CategoryFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder isNull() {
    return super.isNull() as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as CategoryFilterBuilder;
  }

  @override
  CategoryField get not {
    return super.not as CategoryField;
  }
}
// endregion CategoryField

// region CategoryFilterBuilder
class CategoryFilterBuilder extends ConjunctionBase {
  CategoryFilterBuilder(Category obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnCategory = obj._mnCategory;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  CategoryManager? _mnCategory;

  /// put the sql keyword 'AND'
  @override
  CategoryFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  CategoryFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  CategoryFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  CategoryFilterBuilder where(String? whereCriteria, {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  CategoryFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  CategoryFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  CategoryFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CategoryFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CategoryFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  CategoryFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  CategoryFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  CategoryField _setField(CategoryField? field, String colName, DbType dbtype) {
    return CategoryField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  CategoryField? _id;
  CategoryField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  CategoryField? _status;
  CategoryField get status {
    return _status = _setField(_status, 'status', DbType.integer);
  }

  CategoryField? _date_modify;
  CategoryField get date_modify {
    return _date_modify =
        _setField(_date_modify, 'date_modify', DbType.integer);
  }

  CategoryField? _user_id;
  CategoryField get user_id {
    return _user_id = _setField(_user_id, 'user_id', DbType.integer);
  }

  CategoryField? _text;
  CategoryField get text {
    return _text = _setField(_text, 'text', DbType.text);
  }

  CategoryField? _icon_code;
  CategoryField get icon_code {
    return _icon_code = _setField(_icon_code, 'icon_code', DbType.integer);
  }

  CategoryField? _icon_color;
  CategoryField get icon_color {
    return _icon_color = _setField(_icon_color, 'icon_color', DbType.integer);
  }

  CategoryField? _block;
  CategoryField get block {
    return _block = _setField(_block, 'block', DbType.integer);
  }

  CategoryField? _position;
  CategoryField get position {
    return _position = _setField(_position, 'position', DbType.integer);
  }

  CategoryField? _type;
  CategoryField get type {
    return _type = _setField(_type, 'type', DbType.integer);
  }

  /// Deletes List<Category> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnCategory!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnCategory!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from category ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnCategory!.updateBatch(qparams, values);
  }

  /// This method always returns [Category] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Category?
  @override
  Future<Category?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnCategory!.toList(qparams);
    final data = await objFuture;
    Category? obj;
    if (data.isNotEmpty) {
      obj = Category.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Category]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Category?
  @override
  Future<Category> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Category();
  }

  /// This method returns int. [Category]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? categoryCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final categoriesFuture = await _mnCategory!.toList(qparams);
    final int count = categoriesFuture[0]['CNT'] as int;
    if (categoryCount != null) {
      categoryCount(count);
    }
    return count;
  }

  /// This method returns List<Category> [Category]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Category>
  @override
  Future<List<Category>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Category> categoriesData = await Category.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return categoriesData;
  }

  /// This method returns Json String [Category]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Category]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Category]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnCategory!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Category]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM category WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnCategory!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Category]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnCategory!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Category.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnCategory!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion CategoryFilterBuilder

// region CategoryFields
class CategoryFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.integer);
  }

  static TableField? _fDate_modify;
  static TableField get date_modify {
    return _fDate_modify = _fDate_modify ??
        SqlSyntax.setField(_fDate_modify, 'date_modify', DbType.integer);
  }

  static TableField? _fUser_id;
  static TableField get user_id {
    return _fUser_id =
        _fUser_id ?? SqlSyntax.setField(_fUser_id, 'user_id', DbType.integer);
  }

  static TableField? _fText;
  static TableField get text {
    return _fText = _fText ?? SqlSyntax.setField(_fText, 'text', DbType.text);
  }

  static TableField? _fIcon_code;
  static TableField get icon_code {
    return _fIcon_code = _fIcon_code ??
        SqlSyntax.setField(_fIcon_code, 'icon_code', DbType.integer);
  }

  static TableField? _fIcon_color;
  static TableField get icon_color {
    return _fIcon_color = _fIcon_color ??
        SqlSyntax.setField(_fIcon_color, 'icon_color', DbType.integer);
  }

  static TableField? _fBlock;
  static TableField get block {
    return _fBlock =
        _fBlock ?? SqlSyntax.setField(_fBlock, 'block', DbType.integer);
  }

  static TableField? _fPosition;
  static TableField get position {
    return _fPosition = _fPosition ??
        SqlSyntax.setField(_fPosition, 'position', DbType.integer);
  }

  static TableField? _fType;
  static TableField get type {
    return _fType =
        _fType ?? SqlSyntax.setField(_fType, 'type', DbType.integer);
  }
}
// endregion CategoryFields

//region CategoryManager
class CategoryManager extends SqfEntityProvider {
  CategoryManager()
      : super(FamilyBudgetModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'category';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion CategoryManager
// region Operation
class Operation extends TableBase {
  Operation(
      {this.id,
      this.status,
      this.date_modify,
      this.type,
      this.user_id,
      this.category_id,
      this.date,
      this.description,
      this.value}) {
    _setDefaultValues();
    softDeleteActivated = false;
  }
  Operation.withFields(this.status, this.date_modify, this.type, this.user_id,
      this.category_id, this.date, this.description, this.value) {
    _setDefaultValues();
  }
  Operation.withId(this.id, this.status, this.date_modify, this.type,
      this.user_id, this.category_id, this.date, this.description, this.value) {
    _setDefaultValues();
  }
  // fromMap v2.0
  Operation.fromMap(Map<String, dynamic> o, {bool setDefaultValues = true}) {
    if (setDefaultValues) {
      _setDefaultValues();
    }
    id = int.tryParse(o['id'].toString());
    if (o['status'] != null) {
      status = int.tryParse(o['status'].toString());
    }
    if (o['date_modify'] != null) {
      date_modify = int.tryParse(o['date_modify'].toString());
    }
    if (o['type'] != null) {
      type = int.tryParse(o['type'].toString());
    }
    if (o['user_id'] != null) {
      user_id = int.tryParse(o['user_id'].toString());
    }
    if (o['category_id'] != null) {
      category_id = int.tryParse(o['category_id'].toString());
    }
    if (o['date'] != null) {
      date = int.tryParse(o['date'].toString());
    }
    if (o['description'] != null) {
      description = o['description'].toString();
    }
    if (o['value'] != null) {
      value = double.tryParse(o['value'].toString());
    }
  }
  // FIELDS (Operation)
  int? id;
  int? status;
  int? date_modify;
  int? type;
  int? user_id;
  int? category_id;
  int? date;
  String? description;
  double? value;

  // end FIELDS (Operation)

  static const bool _softDeleteActivated = false;
  OperationManager? __mnOperation;

  OperationManager get _mnOperation {
    return __mnOperation = __mnOperation ?? OperationManager();
  }

  // METHODS
  @override
  Map<String, dynamic> toMap(
      {bool forQuery = false, bool forJson = false, bool forView = false}) {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }
    if (user_id != null || !forView) {
      map['user_id'] = user_id;
    }
    if (category_id != null || !forView) {
      map['category_id'] = category_id;
    }
    if (date != null || !forView) {
      map['date'] = date;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }

    return map;
  }

  @override
  Future<Map<String, dynamic>> toMapWithChildren(
      [bool forQuery = false,
      bool forJson = false,
      bool forView = false]) async {
    final map = <String, dynamic>{};
    map['id'] = id;
    if (status != null || !forView) {
      map['status'] = status;
    }
    if (date_modify != null || !forView) {
      map['date_modify'] = date_modify;
    }
    if (type != null || !forView) {
      map['type'] = type;
    }
    if (user_id != null || !forView) {
      map['user_id'] = user_id;
    }
    if (category_id != null || !forView) {
      map['category_id'] = category_id;
    }
    if (date != null || !forView) {
      map['date'] = date;
    }
    if (description != null || !forView) {
      map['description'] = description;
    }
    if (value != null || !forView) {
      map['value'] = value;
    }

    return map;
  }

  /// This method returns Json String [Operation]
  @override
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method returns Json String [Operation]
  @override
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChildren(false, true));
  }

  @override
  List<dynamic> toArgs() {
    return [
      status,
      date_modify,
      type,
      user_id,
      category_id,
      date,
      description,
      value
    ];
  }

  @override
  List<dynamic> toArgsWithIds() {
    return [
      id,
      status,
      date_modify,
      type,
      user_id,
      category_id,
      date,
      description,
      value
    ];
  }

  static Future<List<Operation>?> fromWebUrl(Uri uri,
      {Map<String, String>? headers}) async {
    try {
      final response = await http.get(uri, headers: headers);
      return await fromJson(response.body);
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Operation.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  Future<http.Response> postUrl(Uri uri, {Map<String, String>? headers}) {
    return http.post(uri, headers: headers, body: toJson());
  }

  static Future<List<Operation>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = <Operation>[];
    try {
      objList = list
          .map((operation) =>
              Operation.fromMap(operation as Map<String, dynamic>))
          .toList();
    } catch (e) {
      debugPrint(
          'SQFENTITY ERROR Operation.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Operation>> fromMapList(List<dynamic> data,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields,
      bool setDefaultValues = true}) async {
    final List<Operation> objList = <Operation>[];
    loadedFields = loadedFields ?? [];
    for (final map in data) {
      final obj = Operation.fromMap(map as Map<String, dynamic>,
          setDefaultValues: setDefaultValues);

      objList.add(obj);
    }
    return objList;
  }

  /// returns Operation by ID if exist, otherwise returns null
  /// Primary Keys: int? id
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: getById(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: getById(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>returns [Operation] if exist, otherwise returns null
  Future<Operation?> getById(int? id,
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    if (id == null) {
      return null;
    }
    Operation? obj;
    final data = await _mnOperation.getById([id]);
    if (data.length != 0) {
      obj = Operation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// Saves the (Operation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> save({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnOperation.insert(this, ignoreBatch);
    } else {
      await _mnOperation.update(this);
    }

    return id;
  }

  /// Saves the (Operation) object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record
  /// ignoreBatch = true as a default. Set ignoreBatch to false if you run more than one save() operation those are between batchStart and batchCommit
  /// <returns>Returns id
  @override
  Future<int?> saveOrThrow({bool ignoreBatch = true}) async {
    if (id == null || id == 0) {
      id = await _mnOperation.insertOrThrow(this, ignoreBatch);

      isInsert = true;
    } else {
      // id= await _upsert(); // removed in sqfentity_gen 1.3.0+6
      await _mnOperation.updateOrThrow(this);
    }

    return id;
  }

  /// saveAs Operation. Returns a new Primary Key value of Operation

  /// <returns>Returns a new Primary Key value of Operation
  @override
  Future<int?> saveAs({bool ignoreBatch = true}) async {
    id = null;

    return save(ignoreBatch: ignoreBatch);
  }

  void rollbackId() {
    if (isInsert == true) {
      id = null;
    }
  }

  /// saveAll method saves the sent List<Operation> as a bulk in one transaction
  /// Returns a <List<BoolResult>>
  static Future<List<dynamic>> saveAll(List<Operation> operations) async {
    List<dynamic>? result = [];
    // If there is no open transaction, start one
    final isStartedBatch = await FamilyBudgetModel().batchStart();
    for (final obj in operations) {
      await obj.save(ignoreBatch: false);
    }
    if (!isStartedBatch) {
      result = await FamilyBudgetModel().batchCommit();
      for (int i = 0; i < operations.length; i++) {
        if (operations[i].id == null) {
          operations[i].id = result![i] as int;
        }
      }
    }
    return result!;
  }

  /// Updates if the record exists, otherwise adds a new row
  /// <returns>Returns id
  @override
  Future<int?> upsert({bool ignoreBatch = true}) async {
    try {
      final result = await _mnOperation.rawInsert(
          'INSERT OR REPLACE INTO operation (id, status, date_modify, type, user_id, category_id, date, description, value)  VALUES (?,?,?,?,?,?,?,?,?)',
          [
            id,
            status,
            date_modify,
            type,
            user_id,
            category_id,
            date,
            description,
            value
          ],
          ignoreBatch);
      if (result! > 0) {
        saveResult = BoolResult(
            success: true,
            successMessage: 'Operation id=$id updated successfully');
      } else {
        saveResult = BoolResult(
            success: false, errorMessage: 'Operation id=$id did not update');
      }
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Operation Save failed. Error: ${e.toString()}');
      return null;
    }
  }

  /// inserts or replaces the sent List<<Operation>> as a bulk in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a BoolCommitResult
  @override
  Future<BoolCommitResult> upsertAll(List<Operation> operations) async {
    final results = await _mnOperation.rawInsertAll(
        'INSERT OR REPLACE INTO operation (id, status, date_modify, type, user_id, category_id, date, description, value)  VALUES (?,?,?,?,?,?,?,?,?)',
        operations);
    return results;
  }

  /// Deletes Operation

  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    debugPrint('SQFENTITIY: delete Operation invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnOperation
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnOperation.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  @override
  Future<BoolResult> recover([bool recoverChilds = true]) {
    // not implemented because:
    final msg =
        'set useSoftDeleting:true in the table definition of [Operation] to use this feature';
    throw UnimplementedError(msg);
  }

  @override
  OperationFilterBuilder select(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OperationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect;
  }

  @override
  OperationFilterBuilder distinct(
      {List<String>? columnsToSelect, bool? getIsDeleted}) {
    return OperationFilterBuilder(this, getIsDeleted)
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void _setDefaultValues() {
    status = status ?? 1;
  }
  // END METHODS
  // BEGIN CUSTOM CODE
  /*
      you can define customCode property of your SqfEntityTable constant. For example:
      const tablePerson = SqfEntityTable(
      tableName: 'person',
      primaryKeyName: 'id',
      primaryKeyType: PrimaryKeyType.integer_auto_incremental,
      fields: [
        SqfEntityField('firstName', DbType.text),
        SqfEntityField('lastName', DbType.text),
      ],
      customCode: '''
       String fullName()
       { 
         return '$firstName $lastName';
       }
      ''');
     */
  // END CUSTOM CODE
}
// endregion operation

// region OperationField
class OperationField extends FilterBase {
  OperationField(OperationFilterBuilder operationFB) : super(operationFB);

  @override
  OperationFilterBuilder equals(dynamic pValue) {
    return super.equals(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder equalsOrNull(dynamic pValue) {
    return super.equalsOrNull(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder isNull() {
    return super.isNull() as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder contains(dynamic pValue) {
    return super.contains(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder startsWith(dynamic pValue) {
    return super.startsWith(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder endsWith(dynamic pValue) {
    return super.endsWith(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder between(dynamic pFirst, dynamic pLast) {
    return super.between(pFirst, pLast) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder greaterThan(dynamic pValue) {
    return super.greaterThan(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder lessThan(dynamic pValue) {
    return super.lessThan(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder greaterThanOrEquals(dynamic pValue) {
    return super.greaterThanOrEquals(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder lessThanOrEquals(dynamic pValue) {
    return super.lessThanOrEquals(pValue) as OperationFilterBuilder;
  }

  @override
  OperationFilterBuilder inValues(dynamic pValue) {
    return super.inValues(pValue) as OperationFilterBuilder;
  }

  @override
  OperationField get not {
    return super.not as OperationField;
  }
}
// endregion OperationField

// region OperationFilterBuilder
class OperationFilterBuilder extends ConjunctionBase {
  OperationFilterBuilder(Operation obj, bool? getIsDeleted)
      : super(obj, getIsDeleted) {
    _mnOperation = obj._mnOperation;
    _softDeleteActivated = obj.softDeleteActivated;
  }

  bool _softDeleteActivated = false;
  OperationManager? _mnOperation;

  /// put the sql keyword 'AND'
  @override
  OperationFilterBuilder get and {
    super.and;
    return this;
  }

  /// put the sql keyword 'OR'
  @override
  OperationFilterBuilder get or {
    super.or;
    return this;
  }

  /// open parentheses
  @override
  OperationFilterBuilder get startBlock {
    super.startBlock;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  @override
  OperationFilterBuilder where(String? whereCriteria,
      {dynamic parameterValue}) {
    super.where(whereCriteria, parameterValue: parameterValue);
    return this;
  }

  /// page = page number,
  /// pagesize = row(s) per page
  @override
  OperationFilterBuilder page(int page, int pagesize) {
    super.page(page, pagesize);
    return this;
  }

  /// int count = LIMIT
  @override
  OperationFilterBuilder top(int count) {
    super.top(count);
    return this;
  }

  /// close parentheses
  @override
  OperationFilterBuilder get endBlock {
    super.endBlock;
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OperationFilterBuilder orderBy(dynamic argFields) {
    super.orderBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OperationFilterBuilder orderByDesc(dynamic argFields) {
    super.orderByDesc(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='field1, field2'
  /// Example 2: argFields = ['field1', 'field2']
  @override
  OperationFilterBuilder groupBy(dynamic argFields) {
    super.groupBy(argFields);
    return this;
  }

  /// argFields might be String or List<String>.
  /// Example 1: argFields='name, date'
  /// Example 2: argFields = ['name', 'date']
  @override
  OperationFilterBuilder having(dynamic argFields) {
    super.having(argFields);
    return this;
  }

  OperationField _setField(
      OperationField? field, String colName, DbType dbtype) {
    return OperationField(this)
      ..param = DbParameter(
          dbType: dbtype, columnName: colName, wStartBlock: openedBlock);
  }

  OperationField? _id;
  OperationField get id {
    return _id = _setField(_id, 'id', DbType.integer);
  }

  OperationField? _status;
  OperationField get status {
    return _status = _setField(_status, 'status', DbType.integer);
  }

  OperationField? _date_modify;
  OperationField get date_modify {
    return _date_modify =
        _setField(_date_modify, 'date_modify', DbType.integer);
  }

  OperationField? _type;
  OperationField get type {
    return _type = _setField(_type, 'type', DbType.integer);
  }

  OperationField? _user_id;
  OperationField get user_id {
    return _user_id = _setField(_user_id, 'user_id', DbType.integer);
  }

  OperationField? _category_id;
  OperationField get category_id {
    return _category_id =
        _setField(_category_id, 'category_id', DbType.integer);
  }

  OperationField? _date;
  OperationField get date {
    return _date = _setField(_date, 'date', DbType.integer);
  }

  OperationField? _description;
  OperationField get description {
    return _description = _setField(_description, 'description', DbType.text);
  }

  OperationField? _value;
  OperationField get value {
    return _value = _setField(_value, 'value', DbType.real);
  }

  /// Deletes List<Operation> bulk by query
  ///
  /// <returns>BoolResult res.success= true (Deleted), false (Could not be deleted)
  @override
  Future<BoolResult> delete([bool hardDelete = false]) async {
    buildParameters();
    var r = BoolResult(success: false);

    if (_softDeleteActivated && !hardDelete) {
      r = await _mnOperation!.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _mnOperation!.delete(qparams);
    }
    return r;
  }

  /// using:
  /// update({'fieldName': Value})
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  @override
  Future<BoolResult> update(Map<String, dynamic> values) {
    buildParameters();
    if (qparams.limit! > 0 || qparams.offset! > 0) {
      qparams.whereString =
          'id IN (SELECT id from operation ${qparams.whereString!.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit! > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset! > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _mnOperation!.updateBatch(qparams, values);
  }

  /// This method always returns [Operation] Obj if exist, otherwise returns null
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Operation?
  @override
  Future<Operation?> toSingle(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    buildParameters(pSize: 1);
    final objFuture = _mnOperation!.toList(qparams);
    final data = await objFuture;
    Operation? obj;
    if (data.isNotEmpty) {
      obj = Operation.fromMap(data[0] as Map<String, dynamic>);
    } else {
      obj = null;
    }
    return obj;
  }

  /// This method always returns [Operation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toSingle(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toSingle(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns> Operation?
  @override
  Future<Operation> toSingleOrDefault(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    return await toSingle(
            preload: preload,
            preloadFields: preloadFields,
            loadParents: loadParents,
            loadedFields: loadedFields) ??
        Operation();
  }

  /// This method returns int. [Operation]
  /// <returns>int
  @override
  Future<int> toCount([VoidCallback Function(int c)? operationCount]) async {
    buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final operationsFuture = await _mnOperation!.toList(qparams);
    final int count = operationsFuture[0]['CNT'] as int;
    if (operationCount != null) {
      operationCount(count);
    }
    return count;
  }

  /// This method returns List<Operation> [Operation]
  /// bool preload: if true, loads all related child objects (Set preload to true if you want to load all fields related to child or parent)
  /// ex: toList(preload:true) -> Loads all related objects
  /// List<String> preloadFields: specify the fields you want to preload (preload parameter's value should also be "true")
  /// ex: toList(preload:true, preloadFields:['plField1','plField2'... etc])  -> Loads only certain fields what you specified
  /// bool loadParents: if true, loads all parent objects until the object has no parent

  /// <returns>List<Operation>
  @override
  Future<List<Operation>> toList(
      {bool preload = false,
      List<String>? preloadFields,
      bool loadParents = false,
      List<String>? loadedFields}) async {
    final data = await toMapList();
    final List<Operation> operationsData = await Operation.fromMapList(data,
        preload: preload,
        preloadFields: preloadFields,
        loadParents: loadParents,
        loadedFields: loadedFields,
        setDefaultValues: qparams.selectColumns == null);
    return operationsData;
  }

  /// This method returns Json String [Operation]
  @override
  Future<String> toJson() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap(forJson: true));
    }
    return json.encode(list);
  }

  /// This method returns Json String. [Operation]
  @override
  Future<String> toJsonWithChilds() async {
    final list = <dynamic>[];
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChildren(false, true));
    }
    return json.encode(list);
  }

  /// This method returns List<dynamic>. [Operation]
  /// <returns>List<dynamic>
  @override
  Future<List<dynamic>> toMapList() async {
    buildParameters();
    return await _mnOperation!.toList(qparams);
  }

  /// This method returns Primary Key List SQL and Parameters retVal = Map<String,dynamic>. [Operation]
  /// retVal['sql'] = SQL statement string, retVal['args'] = whereArguments List<dynamic>;
  /// <returns>List<String>
  @override
  Map<String, dynamic> toListPrimaryKeySQL([bool buildParams = true]) {
    final Map<String, dynamic> _retVal = <String, dynamic>{};
    if (buildParams) {
      buildParameters();
    }
    _retVal['sql'] = 'SELECT `id` FROM operation WHERE ${qparams.whereString}';
    _retVal['args'] = qparams.whereArguments;
    return _retVal;
  }

  /// This method returns Primary Key List<int>.
  /// <returns>List<int>
  @override
  Future<List<int>> toListPrimaryKey([bool buildParams = true]) async {
    if (buildParams) {
      buildParameters();
    }
    final List<int> idData = <int>[];
    qparams.selectColumns = ['id'];
    final idFuture = await _mnOperation!.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..  [Operation]
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  @override
  Future<List<dynamic>> toListObject() async {
    buildParameters();

    final objectFuture = _mnOperation!.toList(qparams);

    final List<dynamic> objectsData = <dynamic>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  /// Sample usage: await Operation.select(columnsToSelect: ['columnName']).toListString()
  @override
  Future<List<String>> toListString(
      [VoidCallback Function(List<String> o)? listString]) async {
    buildParameters();

    final objectFuture = _mnOperation!.toList(qparams);

    final List<String> objectsData = <String>[];
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns![0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion OperationFilterBuilder

// region OperationFields
class OperationFields {
  static TableField? _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField? _fStatus;
  static TableField get status {
    return _fStatus =
        _fStatus ?? SqlSyntax.setField(_fStatus, 'status', DbType.integer);
  }

  static TableField? _fDate_modify;
  static TableField get date_modify {
    return _fDate_modify = _fDate_modify ??
        SqlSyntax.setField(_fDate_modify, 'date_modify', DbType.integer);
  }

  static TableField? _fType;
  static TableField get type {
    return _fType =
        _fType ?? SqlSyntax.setField(_fType, 'type', DbType.integer);
  }

  static TableField? _fUser_id;
  static TableField get user_id {
    return _fUser_id =
        _fUser_id ?? SqlSyntax.setField(_fUser_id, 'user_id', DbType.integer);
  }

  static TableField? _fCategory_id;
  static TableField get category_id {
    return _fCategory_id = _fCategory_id ??
        SqlSyntax.setField(_fCategory_id, 'category_id', DbType.integer);
  }

  static TableField? _fDate;
  static TableField get date {
    return _fDate =
        _fDate ?? SqlSyntax.setField(_fDate, 'date', DbType.integer);
  }

  static TableField? _fDescription;
  static TableField get description {
    return _fDescription = _fDescription ??
        SqlSyntax.setField(_fDescription, 'description', DbType.text);
  }

  static TableField? _fValue;
  static TableField get value {
    return _fValue =
        _fValue ?? SqlSyntax.setField(_fValue, 'value', DbType.real);
  }
}
// endregion OperationFields

//region OperationManager
class OperationManager extends SqfEntityProvider {
  OperationManager()
      : super(FamilyBudgetModel(),
            tableName: _tableName,
            primaryKeyList: _primaryKeyList,
            whereStr: _whereStr);
  static const String _tableName = 'operation';
  static const List<String> _primaryKeyList = ['id'];
  static const String _whereStr = 'id=?';
}

//endregion OperationManager
class FamilyBudgetModelSequenceManager extends SqfEntityProvider {
  FamilyBudgetModelSequenceManager() : super(FamilyBudgetModel());
}
// END OF ENTITIES
